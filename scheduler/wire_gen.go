// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ac-zht/gotools/option"
	"github.com/ac-zht/gotools/pool"
	"github.com/ac-zht/super-job/scheduler/internal/repository"
	"github.com/ac-zht/super-job/scheduler/internal/repository/dao"
	"github.com/ac-zht/super-job/scheduler/internal/service"
	"github.com/ac-zht/super-job/scheduler/internal/service/http/client"
	"github.com/ac-zht/super-job/scheduler/internal/service/notify"
	"github.com/ac-zht/super-job/scheduler/internal/web"
	"github.com/ac-zht/super-job/scheduler/ioc"
	"github.com/google/wire"
	"net/http"
)

// Injectors from wire.go:

func InitScheduler() *web.Scheduler {
	db := ioc.InitDB()
	taskDAO := dao.NewTaskDAO(db)
	taskRepository := repository.NewTaskRepository(taskDAO)
	taskLogDAO := dao.NewTaskLogDAO(db)
	taskLogRepository := repository.NewTaskLogRepository(taskLogDAO)
	settingDAO := dao.NewSettingDAO(db)
	settingRepository := repository.NewSettingRepository(settingDAO)
	v := NewNotifiableSlice(settingRepository)
	notifyService := NewNotifyService(v...)
	v2 := NewCronJobServiceOption()
	jobService := service.NewJobService(taskRepository, taskLogRepository, notifyService, v2...)
	onDemandBlockTaskPool := NewOnDemandBlockTaskPool()
	v3 := NewSchedulerOption()
	scheduler := web.NewScheduler(jobService, onDemandBlockTaskPool, v3...)
	return scheduler
}

// wire.go:

func NewHttpClient() *client.HttpClient {
	return &client.HttpClient{
		Url:     "",
		Timeout: 5,
		Client:  &http.Client{},
		Req:     &http.Request{},
	}
}

func NewNotifiableSlice(repo repository.SettingRepository) []notify.Notifiable {
	return []notify.Notifiable{notify.NewMailNotify(repo), notify.NewSlackNotify(repo, NewHttpClient()), notify.NewWebhookNotify(repo)}
}

var notifyServiceProvider = wire.NewSet(dao.NewSettingDAO, repository.NewSettingRepository, NewNotifiableSlice,
	NewNotifyService,
)

func NewNotifyService(nts ...notify.Notifiable) notify.Service {
	return notify.NewService(100, nts...)
}

func NewOnDemandBlockTaskPool() *pool.OnDemandBlockTaskPool {
	quickPool, _ := pool.NewOnDemandBlockTaskPool(5, 10)
	return quickPool
}

func NewCronJobServiceOption() []option.Option[service.CronJobService] {
	return []option.Option[service.CronJobService]{func(s *service.CronJobService) {}}
}

func NewSchedulerOption() []option.Option[web.Scheduler] {
	return []option.Option[web.Scheduler]{func(s *web.Scheduler) {}}
}
